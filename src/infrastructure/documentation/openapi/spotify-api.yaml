openapi: 3.0.3
info:
  title: Spotify API - Secure Music Platform
  description: |
    A secure and scalable music streaming API built with security-first principles.
    
    ## Security Features
    - JWT-based authentication with refresh tokens
    - Rate limiting and DDoS protection
    - Input validation and sanitization
    - OWASP Top 10 protection
    - Comprehensive audit logging
    
    ## Authentication
    This API uses JWT Bearer tokens for authentication. To authenticate:
    1. Register a new account or login with existing credentials
    2. Use the returned access token in the Authorization header
    3. Refresh tokens when they expire using the refresh endpoint
    
    ## Rate Limiting
    - Authentication endpoints: 5 requests per minute
    - General API endpoints: 100 requests per minute
    - Upload endpoints: 10 requests per hour
    - Streaming endpoints: 1000 requests per hour
    
    ## Error Handling
    All errors follow a consistent format with appropriate HTTP status codes
    and detailed error messages for debugging.
    
  version: 1.0.0
  contact:
    name: Spotify API Support
    email: support@spotify-api.com
    url: https://docs.spotify-api.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://spotify-api.com/terms

servers:
  - url: https://api.spotify-api.com/v1
    description: Production server
  - url: https://staging-api.spotify-api.com/v1
    description: Staging server
  - url: http://localhost:3000/api
    description: Development server

security:
  - BearerAuth: []

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email verification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              basic_user:
                summary: Basic user registration
                value:
                  email: "user@example.com"
                  username: "musiclover123"
                  password: "SecurePass123!"
                  confirmPassword: "SecurePass123!"
                  firstName: "John"
                  lastName: "Doe"
                  acceptTerms: true
                  acceptPrivacyPolicy: true
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              email_login:
                summary: Login with email
                value:
                  emailOrUsername: "user@example.com"
                  password: "SecurePass123!"
                  rememberMe: true
              username_login:
                summary: Login with username
                value:
                  emailOrUsername: "musiclover123"
                  password: "SecurePass123!"
                  rememberMe: false
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: Refresh token (if rememberMe is true)
              schema:
                type: string
                example: "refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/api/auth/refresh"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using refresh token
      security: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token (can also be provided via cookie)
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logout user and revoke tokens
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get current authenticated user information
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # User Management Endpoints
  /users/me:
    get:
      tags:
        - Users
      summary: Get my profile
      description: Get current user's complete profile
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags:
        - Users
      summary: Update my profile
      description: Update current user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Get user profile by ID (public information only unless own profile)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: includePrivate
          in: query
          description: Include private data (only works for own profile)
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/search:
    get:
      tags:
        - Users
      summary: Search users
      description: Search for users by username or display name
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 2
            maxLength: 100
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of results per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserProfile'
                          pagination:
                            $ref: '#/components/schemas/PaginationInfo'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Song Management Endpoints
  /songs:
    post:
      tags:
        - Songs
      summary: Upload a new song
      description: Upload a new song with audio file and metadata
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadSongRequest'
      responses:
        '201':
          description: Song uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          song:
                            $ref: '#/components/schemas/Song'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '413':
          $ref: '#/components/responses/PayloadTooLargeError'
        '415':
          $ref: '#/components/responses/UnsupportedMediaTypeError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /songs/search:
    get:
      tags:
        - Songs
      summary: Search songs
      description: Search for songs by title, artist, or genre
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 2
            maxLength: 100
        - name: genre
          in: query
          description: Filter by genre
          schema:
            $ref: '#/components/schemas/Genre'
        - name: artist
          in: query
          description: Filter by artist name
          schema:
            type: string
            maxLength: 100
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [title, createdAt, duration, totalPlays]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          songs:
                            type: array
                            items:
                              $ref: '#/components/schemas/Song'
                          pagination:
                            $ref: '#/components/schemas/PaginationInfo'
        '400':
          $ref: '#/components/responses/ValidationError'

  /songs/my:
    get:
      tags:
        - Songs
      summary: Get my songs
      description: Get current user's uploaded songs
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [title, createdAt, duration, totalPlays]
            default: createdAt
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: User's songs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          songs:
                            type: array
                            items:
                              $ref: '#/components/schemas/Song'
                          pagination:
                            $ref: '#/components/schemas/PaginationInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /songs/{songId}:
    get:
      tags:
        - Songs
      summary: Get song details
      description: Get detailed information about a specific song
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Song details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          song:
                            $ref: '#/components/schemas/Song'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    put:
      tags:
        - Songs
      summary: Update song
      description: Update song metadata (owner only)
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSongRequest'
      responses:
        '200':
          description: Song updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          song:
                            $ref: '#/components/schemas/Song'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Songs
      summary: Delete song
      description: Delete a song (owner only)
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Song deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /songs/{songId}/stream:
    get:
      tags:
        - Songs
      summary: Stream song audio
      description: Stream song audio file
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: Range
          in: header
          description: Range header for partial content requests
          schema:
            type: string
            example: "bytes=0-1023"
      responses:
        '200':
          description: Audio stream
          headers:
            Content-Type:
              schema:
                type: string
                example: "audio/mpeg"
            Content-Length:
              schema:
                type: integer
            Accept-Ranges:
              schema:
                type: string
                example: "bytes"
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
        '206':
          description: Partial content
          headers:
            Content-Range:
              schema:
                type: string
                example: "bytes 0-1023/2048"
            Content-Length:
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '416':
          description: Range Not Satisfiable

  # Album Management Endpoints
  /albums:
    post:
      tags:
        - Albums
      summary: Create a new album
      description: Create a new album
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumRequest'
      responses:
        '201':
          description: Album created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          album:
                            $ref: '#/components/schemas/Album'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /albums/search:
    get:
      tags:
        - Albums
      summary: Search albums
      description: Search for albums by title, artist, or genre
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 2
            maxLength: 100
        - name: genre
          in: query
          description: Filter by genre
          schema:
            $ref: '#/components/schemas/Genre'
        - name: artist
          in: query
          description: Filter by artist name
          schema:
            type: string
            maxLength: 100
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [title, releaseDate, createdAt, totalPlays]
            default: createdAt
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          albums:
                            type: array
                            items:
                              $ref: '#/components/schemas/Album'
                          pagination:
                            $ref: '#/components/schemas/PaginationInfo'

  /albums/{albumId}:
    get:
      tags:
        - Albums
      summary: Get album details
      description: Get detailed information about a specific album
      parameters:
        - name: albumId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: includeSongs
          in: query
          description: Include songs in the response
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Album details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          album:
                            $ref: '#/components/schemas/Album'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  # Health and Monitoring Endpoints
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check API health status
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    description: Uptime in seconds
                  version:
                    type: string
                  environment:
                    type: string
                  checks:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        status:
                          type: string
                          enum: [pass, fail, warn]
                        duration:
                          type: number
                        message:
                          type: string
        '503':
          description: API is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [unhealthy]
                  error:
                    type: string

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from login endpoint

  schemas:
    # Request Schemas
    RegisterRequest:
      type: object
      required:
        - email
        - username
        - password
        - confirmPassword
        - acceptTerms
        - acceptPrivacyPolicy
      properties:
        email:
          type: string
          format: email
          maxLength: 254
          example: "user@example.com"
        username:
          type: string
          pattern: '^[a-zA-Z0-9_]{3,30}$'
          minLength: 3
          maxLength: 30
          example: "musiclover123"
        password:
          type: string
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]'
          description: Must contain at least one lowercase letter, one uppercase letter, one number, and one special character
          example: "SecurePass123!"
        confirmPassword:
          type: string
          description: Must match password field
          example: "SecurePass123!"
        firstName:
          type: string
          maxLength: 50
          example: "John"
        lastName:
          type: string
          maxLength: 50
          example: "Doe"
        acceptTerms:
          type: boolean
          enum: [true]
          description: Must be true to register
        acceptPrivacyPolicy:
          type: boolean
          enum: [true]
          description: Must be true to register

    LoginRequest:
      type: object
      required:
        - emailOrUsername
        - password
      properties:
        emailOrUsername:
          type: string
          minLength: 3
          maxLength: 254
          description: Email address or username
          example: "user@example.com"
        password:
          type: string
          minLength: 1
          maxLength: 128
          example: "SecurePass123!"
        rememberMe:
          type: boolean
          default: false
          description: If true, sets a long-lived refresh token cookie

    UpdateProfileRequest:
      type: object
      minProperties: 1
      properties:
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        displayName:
          type: string
          minLength: 2
          maxLength: 50
        bio:
          type: string
          maxLength: 500
        avatarUrl:
          type: string
          format: uri
          maxLength: 500
        country:
          type: string
          pattern: '^[A-Z]{2}$'
          description: ISO 3166-1 alpha-2 country code
        dateOfBirth:
          type: string
          format: date
          description: Must be at least 13 years ago
        isPublic:
          type: boolean
          description: Whether profile is publicly visible

    UploadSongRequest:
      type: object
      required:
        - title
        - duration
        - audioFile
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        duration:
          type: integer
          minimum: 1
          maximum: 7200
          description: Duration in seconds (max 2 hours)
        genre:
          $ref: '#/components/schemas/Genre'
        albumId:
          type: string
          format: uuid
          description: Optional album to add song to
        isPublic:
          type: string
          enum: ['true', 'false']
          default: 'true'
        artist:
          type: string
          maxLength: 100
        year:
          type: integer
          minimum: 1900
          maximum: 2025
        trackNumber:
          type: integer
          minimum: 1
          maximum: 999
        lyrics:
          type: string
          maxLength: 10000
        audioFile:
          type: string
          format: binary
          description: Audio file (MP3, WAV, FLAC, AAC, OGG, WebM)

    UpdateSongRequest:
      type: object
      minProperties: 1
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        genre:
          $ref: '#/components/schemas/Genre'
        isPublic:
          type: boolean
        artist:
          type: string
          maxLength: 100
        year:
          type: integer
          minimum: 1900
          maximum: 2025
        trackNumber:
          type: integer
          minimum: 1
          maximum: 999
        lyrics:
          type: string
          maxLength: 10000

    CreateAlbumRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        genre:
          $ref: '#/components/schemas/Genre'
        releaseDate:
          type: string
          format: date
        isPublic:
          type: string
          enum: ['true', 'false']
          default: 'true'
        coverImageUrl:
          type: string
          format: uri
          maxLength: 500
        recordLabel:
          type: string
          maxLength: 100
        producer:
          type: string
          maxLength: 100
        totalTracks:
          type: integer
          minimum: 1
          maximum: 999

    # Response Schemas
    SuccessResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          enum: [true]
        message:
          type: string

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: object
          required:
            - code
            - message
            - timestamp
            - path
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
            timestamp:
              type: string
              format: date-time
            requestId:
              type: string
            path:
              type: string

    RegisterResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              required:
                - accessToken
                - tokenType
                - expiresIn
                - user
              properties:
                accessToken:
                  type: string
                  description: JWT access token
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                tokenType:
                  type: string
                  enum: [Bearer]
                expiresIn:
                  type: integer
                  description: Token expiration time in seconds
                  example: 3600
                user:
                  $ref: '#/components/schemas/User'

    # Entity Schemas
    User:
      type: object
      required:
        - id
        - email
        - username
        - role
        - isVerified
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        role:
          type: string
          enum: [user, artist, admin, moderator]
        isVerified:
          type: boolean
        profile:
          $ref: '#/components/schemas/UserProfileData'
        createdAt:
          type: string
          format: date-time

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            lastLoginAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    UserProfileData:
      type: object
      properties:
        displayName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        avatarUrl:
          type: string
          format: uri
        country:
          type: string
        dateOfBirth:
          type: string
          format: date
        isPublic:
          type: boolean

    Song:
      type: object
      required:
        - id
        - title
        - duration
        - artistId
        - artistName
        - status
        - isPublic
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        duration:
          type: integer
          description: Duration in seconds
        genre:
          $ref: '#/components/schemas/Genre'
        secondaryGenres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        trackNumber:
          type: integer
        discNumber:
          type: integer
        audioFileUrl:
          type: string
          format: uri
        audioQuality:
          type: string
          enum: [low, medium, high, lossless]
        explicitContent:
          type: boolean
        language:
          type: string
          pattern: '^[a-z]{2}$'
        totalPlays:
          type: integer
          minimum: 0
        totalLikes:
          type: integer
          minimum: 0
        totalShares:
          type: integer
          minimum: 0
        slug:
          type: string
        tags:
          type: array
          items:
            type: string
        artistId:
          type: string
          format: uuid
        artistName:
          type: string
        artistAvatarUrl:
          type: string
          format: uri
        artistVerificationStatus:
          type: string
          enum: [unverified, pending, verified, rejected]
        albumId:
          type: string
          format: uuid
        albumTitle:
          type: string
        albumCoverUrl:
          type: string
          format: uri
        status:
          type: string
          enum: [draft, published, archived, deleted]
        isPublic:
          type: boolean
        createdAt:
          type: string
          format: date-time
        publishedAt:
          type: string
          format: date-time

    Album:
      type: object
      required:
        - id
        - title
        - artistId
        - artistName
        - albumType
        - status
        - isPublic
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        albumType:
          type: string
          enum: [album, ep, single, compilation, live, remix, soundtrack]
        releaseDate:
          type: string
          format: date
        genre:
          $ref: '#/components/schemas/Genre'
        secondaryGenres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        recordLabel:
          type: string
        producer:
          type: string
        totalTracks:
          type: integer
          minimum: 0
        totalDuration:
          type: integer
          description: Total duration in seconds
        coverImageUrl:
          type: string
          format: uri
        coverImageThumbnailUrl:
          type: string
          format: uri
        totalPlays:
          type: integer
          minimum: 0
        totalLikes:
          type: integer
          minimum: 0
        totalShares:
          type: integer
          minimum: 0
        slug:
          type: string
        tags:
          type: array
          items:
            type: string
        artistId:
          type: string
          format: uuid
        artistName:
          type: string
        artistAvatarUrl:
          type: string
          format: uri
        artistVerificationStatus:
          type: string
          enum: [unverified, pending, verified, rejected]
        status:
          type: string
          enum: [draft, published, archived, deleted]
        isPublic:
          type: boolean
        createdAt:
          type: string
          format: date-time
        publishedAt:
          type: string
          format: date-time
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
          description: Only included when includeSongs=true

    Genre:
      type: string
      enum:
        - rock
        - pop
        - hip_hop
        - jazz
        - classical
        - electronic
        - country
        - blues
        - reggae
        - folk
        - metal
        - punk
        - indie
        - alternative
        - r_and_b
        - soul
        - funk
        - disco
        - house
        - techno
        - dubstep
        - ambient
        - world
        - latin
        - gospel
        - other

    PaginationInfo:
      type: object
      required:
        - page
        - pageSize
        - totalCount
        - totalPages
        - hasNextPage
        - hasPreviousPage
      properties:
        page:
          type: integer
          minimum: 1
        pageSize:
          type: integer
          minimum: 1
        totalCount:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0
        hasNextPage:
          type: boolean
        hasPreviousPage:
          type: boolean

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "Invalid input provided"
              timestamp: "2024-01-15T10:30:00Z"
              path: "/api/auth/register"

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "Authentication required"
              timestamp: "2024-01-15T10:30:00Z"
              path: "/api/users/me"

    ForbiddenError:
      description: Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "FORBIDDEN"
              message: "Access denied"
              timestamp: "2024-01-15T10:30:00Z"
              path: "/api/songs/123"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "NOT_FOUND"
              message: "Resource not found"
              timestamp: "2024-01-15T10:30:00Z"
              path: "/api/songs/123"

    ConflictError:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "CONFLICT"
              message: "User with this email already exists"
              timestamp: "2024-01-15T10:30:00Z"
              path: "/api/auth/register"

    RateLimitError:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per time window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when rate limit resets (Unix timestamp)
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retrying
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "Rate limit exceeded"
              timestamp: "2024-01-15T10:30:00Z"
              path: "/api/auth/login"

    PayloadTooLargeError:
      description: Request payload too large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "PAYLOAD_TOO_LARGE"
              message: "File size exceeds 50MB limit"
              timestamp: "2024-01-15T10:30:00Z"
              path: "/api/songs"

    UnsupportedMediaTypeError:
      description: Unsupported media type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "UNSUPPORTED_MEDIA_TYPE"
              message: "Only audio files are supported"
              timestamp: "2024-01-15T10:30:00Z"
              path: "/api/songs"

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User profile management
  - name: Songs
    description: Song upload and management
  - name: Albums
    description: Album creation and management
  - name: System
    description: System health and monitoring