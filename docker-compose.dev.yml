# Docker Compose for Development
version: '3.8'

services:
  # Main API Service (Development)
  api:
    build:
      context: .
      target: development
    container_name: spotify-api-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DEBUG=spotify:*
    env_file:
      - config/environments/development.env
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - spotify-dev-network
    command: npm run dev

  # PostgreSQL Database (Development)
  postgres-dev:
    image: postgres:15-alpine
    container_name: spotify-postgres-dev
    environment:
      POSTGRES_DB: spotify_api_dev
      POSTGRES_USER: spotify_user
      POSTGRES_PASSWORD: dev_password_123
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./config/postgres/init-dev.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    networks:
      - spotify-dev-network

  # Redis Cache (Development)
  redis-dev:
    image: redis:7-alpine
    container_name: spotify-redis-dev
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    networks:
      - spotify-dev-network

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: spotify-mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - spotify-dev-network

  # MinIO for S3-compatible Storage Testing
  minio:
    image: minio/minio:latest
    container_name: spotify-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio_data:/data
    networks:
      - spotify-dev-network

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: spotify-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres-dev
    networks:
      - spotify-dev-network

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: spotify-redis-commander
    environment:
      REDIS_HOSTS: local:redis-dev:6379
    ports:
      - "8081:8081"
    networks:
      - spotify-dev-network

# Networks
networks:
  spotify-dev-network:
    driver: bridge

# Volumes
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  minio_data:
    driver: local